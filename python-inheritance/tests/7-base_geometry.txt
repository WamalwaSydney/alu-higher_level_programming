==================================
Test for 7-base_geometry.py
==================================

Import the module:
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Create an instance:
>>> bg = BaseGeometry()

Test area method:
>>> try:
...     bg.area()
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[Exception] area() is not implemented

Test integer_validator with valid integers:
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

Test integer_validator with a string:
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer

Test integer_validator with zero:
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0

Test integer_validator with negative number:
>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0

Test integer_validator with a boolean:
>>> try:
...     bg.integer_validator("valid", True)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] valid must be an integer

Test integer_validator with None:
>>> try:
...     bg.integer_validator("valid", None)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] valid must be an integer

Test integer_validator with a list:
>>> try:
...     bg.integer_validator("valid", [1, 2, 3])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] valid must be an integer

Test integer_validator with a float:
>>> try:
...     bg.integer_validator("valid", 7.8)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] valid must be an integer

Test integer_validator with a tuple:
>>> try:
...     bg.integer_validator("valid", (1, 2))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] valid must be an integer

Test integer_validator with missing arguments:
>>> try:
...     bg.integer_validator()
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test integer_validator with 1 missing argument:
>>> try:
...     bg.integer_validator("valid")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] integer_validator() missing 1 required positional argument: 'value'
